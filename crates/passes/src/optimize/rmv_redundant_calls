use crate::*;

pub struct RemoveRedundantCalls {
    result: TransformResultType,
}

impl Default for RemoveRedundantCalls {
    fn default() -> Self {
        Self {
            result: TransformResultType::default(),
        }
    }
}

impl RemoveRedundantCalls {
    /// Find func nodes with no parameters and remove them
    pub(crate) fn get_nodes_branch_pred(&self, graph: &mut DiGraph) -> Vec<usize> {
        let candidates = graph
            .nodes()
            .filter(|node| {
                graph
                    .pred(*node)
                    .map(|pred| match graph.get_node(pred) {
                        Node::Branch(_) => true,
                        _ => false,
                    })
                    .any(|x| x)
            })
            .collect::<Vec<_>>();

        // Remove candidates that are call node
        candidates
            .into_iter()
            .filter(|node| match graph.get_node(*node) {
                Node::Call(_) => false,
                _ => true,
            })
            .collect::<Vec<_>>()
    }
}
